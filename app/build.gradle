/*
 * Copyright 2020 Cagatay Ulusoy (Ulus Oy Apps). All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'org.jmailen.kotlinter'
apply plugin: "androidx.navigation.safeargs.kotlin"
apply plugin: "com.huawei.agconnect"

android {
    compileSdkVersion rootProject.ext.compile_sdk_version
    buildToolsVersion rootProject.ext.build_tools_version

    defaultConfig {
        applicationId rootProject.ext.package_name
        minSdkVersion rootProject.ext.min_sdk_version
        targetSdkVersion rootProject.ext.target_sdk_version
        versionCode rootProject.ext.version_code
        versionName rootProject.ext.version_name
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        def secureProps = new Properties()
        if (file("secure.properties").exists()) {
            file("secure.properties")?.withInputStream { secureProps.load(it) }
        }
        resValue "string", "google_maps_api_key", (secureProps.getProperty("GOOGLE_MAPS_API_KEY") ?: "")
        resValue "string", "mapbox_api_key", (secureProps.getProperty("MAPBOX_API_KEY") ?: "")
    }

    dataBinding {
        enabled true
    }

    viewBinding {
        enabled = true
    }

    signingConfigs {
        release {
            storeFile file('all-about-maps.jks')
            keyAlias 'all-about-maps'
            keyPassword '123456'
            storePassword '123456'
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.release
            debuggable true
        }
        release {
            minifyEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        dexOptions {
            // Specifies a sorted list of fallback build types that the
            // plugin should try to use when a dependency does not include a
            // "staging" build type. You may specify as many fallbacks as you
            // like, and the plugin selects the first build type that's
            // available in the dependency.
            matchingFallbacks = ['release', 'debug']
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    kapt {
        correctErrorTypes = true
    }
}

dependencies {

    implementation project(":domain")
    implementation project(":gpx")

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    // Dagger
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    kapt "com.google.dagger:dagger-android-processor:$dagger_version"
    implementation "com.google.dagger:dagger:$dagger_version"
    implementation "com.google.dagger:dagger-android:$dagger_version"
    implementation "com.google.dagger:dagger-android-support:$dagger_version"

    implementation "androidx.appcompat:appcompat:$appcompat_version"
    implementation "androidx.fragment:fragment-ktx:$fragment_version"

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"

    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"
    implementation "androidx.navigation:navigation-runtime-ktx:$nav_version"

    implementation "androidx.constraintlayout:constraintlayout:$constraint_layout_version"

    implementation "com.google.android.material:material:$material_version"

    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"

    // Mapbox
    implementation "com.mapbox.mapboxsdk:mapbox-android-sdk:$mapboxSdkVersion"
    implementation "com.mapbox.mapboxsdk:mapbox-android-plugin-annotation-v8:$mapboxAnnotationVersion"

    // GMS
    implementation "com.google.android.gms:play-services-maps:$gms_maps_version"

    // HUAWEI
    implementation "com.huawei.hms:maps:$huawei_maps_version"

    // Timber
    implementation "com.jakewharton.timber:timber:$timber_version"

    // Epoxy
    implementation "com.airbnb.android:epoxy-databinding:$epoxy_version"
    implementation "com.airbnb.android:epoxy:$epoxy_version"
    kapt "com.airbnb.android:epoxy-processor:$epoxy_version"
}